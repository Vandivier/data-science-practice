rename v2 race
rename   wherecrashkmtofinish crash_location
rename   v12 crash_riders

gen redflag3km = 0
replace redflag3km = 1 if year >=2005
replace crash_riders = 0 if crash_riders==.
replace crash_location = 0 if crash_location ==.
gen crash=0
replace crash=1 if crash_riders>0
replace year2007=0
replace year2007=1 if year==2007
replace year2003=0
replace year2003=1 if year==2003

/* Check sensitivity to groupsprint definition*/
gen groupsprint=0
replace groupsprint=1 if finishtype==1 | finishtype==2
/* replace groupsprint=1 if finishgroup>8 & redflag==1 */

gen redzone=0
replace redzone=1 if crash_location >1 & crash_location<=3
gen redflag_zone=redflag3km*redzone


* Scott found two summit finishes that we missed before*/
replace redflag=0 if finishtype==5

* Since crash_riders is measured with error, especially above 4-5 riders, create categorical crash_riders variable*/
histogram crash_riders if crash==1
gen crash_type=0
replace crash_type=1 if crash_riders==1
replace crash_type=2 if crash_riders>1 & crash_riders<6
replace crash_type=3 if crash_riders>5

bysort year: sum crash crash_riders crash_location

ttest crash_riders if redflag==1, by(redflag3km)
ttest crash_riders if groupsprint==1, by(redflag3km)
ttest finishgroup if redflag==1, by(redflag3km)
ttest finishgroup if groupsprint==1, by(redflag3km)

ttest crash_riders if redflag==1 & crash_location<=1, by(redflag3km)
ttest crash_riders if groupsprint==1 & crash_location<=1, by(redflag3km)
ttest crash_riders if redflag==1 & crash_location==0 | crash_location >1 & crash_location<=3, by(redflag3km)
ttest crash_riders if groupsprint==1 & crash_location==0 | crash_location >1 & crash_location<=3, by(redflag3km)

ttest crash if redflag==1 & crash_location<=1, by(redflag3km)
ttest crash if groupsprint==1 & crash_location<=1, by(redflag3km)



* Table 1 ****
ttest crash if redflag==1 & crash_location==0 | crash_location >1 & crash_location<=3, by(redflag3km)
ttest crash if groupsprint==1 & crash_location==0 | crash_location >1 & crash_location<=3, by(redflag3km)
ttest crash_riders if redflag==1 & crash_location==0 | crash_location >1 & crash_location<=3, by(redflag3km)
ttest crash_riders if groupsprint==1 & crash_location==0 | crash_location >1 & crash_location<=3, by(redflag3km)
* ********************


gen finishgroup2=finishgroup^2
gen redflaggroup = finishgroup*redflag3km

/* check whether the high correlation between crashing and finishing group size is an artifact of the red flag rule*/
bysort crash: sum finishgroup 
ttest finishgroup if redflag==1, by(redflag3km) 
ttest finishgroup if redflag==1 & crash==0, by(redflag3km) 
ttest finishgroup if redflag==1 & crash_location<=1, by(redflag3km)
ttest finishgroup if groupsprint==1 & crash_location<=1, by(redflag3km)
ttest finishgroup if redflag==1 & crash_location==0 | crash_location >1 & crash_location<=3 & redflag3km==0, by(crash)
ttest finishgroup if redflag==1 & crash_location==0 | crash_location >1 & crash_location<=3 & redflag3km==1, by(crash)


ttest finishgroup if groupsprint==1 & crash_location==0 | crash_location >1 & crash_location<=3, by(redflag3km)

* included regressions *


* Table 2 *************************
global rhs redflag3km finishgroup  stage i.race
xi: probit crash $rhs if redflag==1 & crash_location==0 | crash_location >1 & crash_location<=3
mfx
estimates store redcrash
xi: probit crash $rhs if groupsprint==1 & crash_location==0 | crash_location >1 & crash_location<=3
mfx 
estimates store grpcrash
xi: tobit crash_riders $rhs if redflag==1 & crash_location==0 | crash_location >1 & crash_location<=3, ll(0) robust
estimates store redriders
xi: tobit crash_riders $rhs if groupsprint==1 & crash_location==0 | crash_location >1 & crash_location<=3, ll(0) robust
estimates store grpriders
xi: oprobit crash_type $rhs if redflag==1 & crash_location==0 | crash_location >1 & crash_location<=3, robust
estimates store redtype
mfx, predict(outcome(0)) 
mfx, predict(outcome(1)) 
mfx, predict(outcome(2)) 
mfx, predict(outcome(3))
xi: oprobit crash_type $rhs if groupsprint==1 & crash_location==0 | crash_location >1 & crash_location<=3, robust
mfx, predict(outcome(0)) 
mfx, predict(outcome(1)) 
mfx, predict(outcome(2)) 
mfx, predict(outcome(3))
estimates store grptype
estout redcrash grpcrash redriders grpriders redtype grptype using crash2.txt, cells(b(fmt(a2)) p(par fmt(a2))) stats(N p) replace
* ********************************


estimates clear 

* Table 3 **************************
xi: probit crash $rhs if redflag==1 & crash_location<=1
estimates store redcrash0
xi: probit crash $rhs if groupsprint==1 & crash_location<=1
estimates store grpcrash0
xi: tobit crash_riders $rhs if redflag==1 & crash_location<=1, ll(0) robust
estimates store redriders0
xi: tobit crash_riders $rhs if groupsprint==1 & crash_location<=1, ll(0) robust
estimates store grpriders0
xi: oprobit crash_type $rhs if redflag==1 & crash_location<=1, robust
estimates store redtype0
xi: oprobit crash_type $rhs if groupsprint==1 & crash_location<=1, robust
estimates store grptype0

xi: probit crash $rhs if redflag==1 & crash_location==0 |  crash_location<=3
estimates store redcrash3
xi: probit crash $rhs if groupsprint==1 & crash_location==0 |  crash_location<=3
estimates store grpcrash3
xi: tobit crash_riders $rhs if redflag==1 & crash_location==0 |  crash_location<=3, ll(0) robust
estimates store redriders3
xi: tobit crash_riders $rhs if groupsprint==1 & crash_location==0 |  crash_location<=3, ll(0) robust
estimates store grpriders3
xi: oprobit crash_type $rhs if redflag==1 & crash_location==0 |  crash_location<=3, robust
estimates store redtype3
xi: oprobit crash_type $rhs if groupsprint==1 & crash_location==0 | crash_location<=3, robust
estimates store grptype3

xi: probit crash $rhs if redflag==1 & crash_location==0 | crash_location >3
estimates store redcrash5
xi: probit crash $rhs if groupsprint==1 & crash_location==0 | crash_location >3
estimates store grpcrash5
xi: tobit crash_riders $rhs if redflag==1 & crash_location==0 | crash_location >3, ll(0) robust
estimates store redriders5
xi: tobit crash_riders $rhs if groupsprint==1 & crash_location==0 | crash_location >3, ll(0) robust
estimates store grpriders5
xi: oprobit crash_type $rhs if redflag==1 & crash_location==0 | crash_location >3, robust
estimates store redtype5
xi: oprobit crash_type $rhs if groupsprint==1 & crash_location==0 | crash_location >3, robust
estimates store grptype5
estout grpcrash* grpriders* grptype* using crash_interval.txt, cells(b(fmt(a2)) p(par fmt(a2))) stats(N) replace

* **********************************







probit crash year redflag3km if redflag==1 & crash_location<=3
xi: dprobit crash i.race i.year redflag3km if redflag==1 & crash_location<=1 
/*crash type */
xi: oprobit crash_type finishgroup i.race redflag3km redflag_zone if redflag==1 
xi: oprobit crash_type finishgroup i.race redflag3km redflag_zone if groupsprint==1 


/**NOTE: Too few non-censored obs to include all year dummies. 2003 and 2007 seem to be the only significant year dummies **/
xi: tobit crash_riders year i.race redflag3km if redflag==1 & crash_location<=3, ll(0)
xi: tobit crash_riders i.race redflag3km if redflag==1 & crash_location<=3, ll(0)
xi: tobit crash_riders year redflag3km if redflag==1 & crash_location==0 | crash_location >1 & crash_location<=3, ll(0)

xi: tobit crash_riders yr2003 yr2007 redflag3km if groupsprint==1 & crash_location==0 | crash_location >1 & crash_location<=3, ll(0)

gen crash1_3km = 0
replace crash1_3km =1 if crash_location>1 & crash_location<=3
gen crash0_1km = 0
replace crash0_1km = 1 if crash_location<=1 & crash_location>0

/**Since both number of riders in crash and location of crash may matter, here's a SUR Tobit for these two equations. (may need to 'ssc install bitobit') **/
gen nocrash=0
replace nocrash= -1 if crash_riders==0
xi: bitobit estimate if redflag==1 & crash_location<=3, y1(crash_riders) x1(redflag3km i.race) y2(crash_location) x2(redflag3km i.race) censor1(nocrash) censor2(nocrash)
xi: bitobit estimate if redflag==1 & crash_location<=3, y1(crash_riders) x1(year redflag3km i.race) y2(crash_location) x2(year redflag3km i.race) censor1(nocrash) censor2(nocrash)


kdensity crash_location if redflag3km==0 & crash_location<=3 & crash_location>0, addplot(kdensity crash_location if redflag3km==1 & crash_location<=3 & crash_location>0) legend(ring(0) pos(2) label(1 "1km") label(2 "3km")) 

lowess crash_riders crash_location if redflag3km==0 & crash_location<=3 & crash_location>0, addplot(lowess crash_riders crash_location if redflag3km==1 & crash_location<=3 & crash_location>0) 
